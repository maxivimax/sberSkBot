import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
# from quizzes import quizzes

forTinder = [
    ["***–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å*** \n–ò–∑-–∑–∞ –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–∞ –≤ —Å—Ñ–µ—Ä–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ –¥–µ–Ω–µ–≥ –ª—é–¥–∏ —á–∞—Å—Ç–æ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±–µ –¥–æ—Å—Ç–æ–π–Ω—É—é –∂–∏–∑–Ω—å –¥–∞–∂–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ. –ö —Ç–æ–º—É –∂–µ –Ω–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é —á–∞—Å—Ç–æ –ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –ª—é–¥–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—á–∞–ª—å–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º. –ò–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–∏–º –¥–≤—É–º –ø—Ä–∏—á–∏–Ω–∞–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∞—Ç—å –æ—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.", 
    "*–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è 1*", 
    [
        [
            "–¢—ã –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é?", 
            [
                "–î–∞", 
                "–ù–µ—Ç"
            ],
            0
        ],
        [
            "–¢—ã —Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é?", 
            [
                "–î–∞", 
                "–ù–µ—Ç"
            ],
            0
        ],
    ]
    ],
    ["***–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å*** \n–≠—Ç–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏–π, –Ω–∞–≤—ã–∫–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤ —Å—Ñ–µ—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞, –≤–µ–¥—É—â–∏—Ö –∫ —É–ª—É—á—à–µ–Ω–∏—é –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–≤—ã—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏.",
    "*–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è 2*", 
    [
        [
            "–¢—ã –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é 2?", 
            [
                "–î–∞", 
                "–ù–µ—Ç"
            ],
            0
        ],
        [
            "–¢—ã —Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é 2?", 
            [
                "–î–∞", 
                "–ù–µ—Ç"
            ],
            0
        ],
        [
            "–¢—ã —Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç–∞—Ç—å—é 2?", 
            [
                "–î–∞", 
                "–ù–µ—Ç"
            ],
            0
        ],
    ]
    ]
]
statStar = 0
quizStar = 0

button_hi = InlineKeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã', callback_data='helloo')
firstb = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
firstb.add(button_hi)

button_IS = InlineKeyboardButton('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å', callback_data='IS')
button_PH = InlineKeyboardButton('Placeholder', callback_data='ph')
what = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
what.add(button_IS)
what.add(button_PH)

button_back = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='helloo')
back = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
back.add(button_back)

button_quiz = InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ', callback_data='quiz')
backS = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
backS.add(button_quiz)
backS.add(button_back)

button_like = InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é', callback_data='like')
button_disl = InlineKeyboardButton('–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—Ç–Ω–æ', callback_data='dislike')
tinder = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
tinder.add(button_like)
tinder.add(button_disl)

API_TOKEN = '5796845106:AAHhiD-thzIkWBtlDvz75M4QZx93cV3bJZs'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def quiz(quest, options, correct_option_id, message):
    return bot.send_poll(chat_id=message.from_user.id,
                              question=quest,
                              options=options,
                              type='quiz',
                              correct_option_id=correct_option_id,
                              is_anonymous=False)

def quizPoll(quest, options, correct_option_id, userid):
    return bot.send_poll(chat_id=userid,
                              question=quest,
                              options=options,
                              type='quiz',
                              correct_option_id=correct_option_id,
                              is_anonymous=False)

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è –û–ª–µ—à–∞! –ò —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—ë –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å–∫–∞–∂—É, –Ω–æ –∏ –ø–æ–∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã!", reply_markup=firstb)

@dp.message_handler(commands=["quiz"])
async def poll(message: types.Message):
    await quiz("hjkl;", ["lf", "yrn", "gbplf"], 1, message)

@dp.poll_answer_handler()
async def poll_answer(poll_answer: types.PollAnswer):
    answer_ids = poll_answer.option_ids
    
    user_id = poll_answer.user.id
    poll_id = poll_answer.poll_id
    global statStar
    global quizStar

    if (forTinder[statStar][2][quizStar-1][2] not in answer_ids):
        await bot.send_message(user_id, f"""–ù–µ–≤–µ—Ä–Ω–æ :(""")
        if quizStar < len(forTinder[statStar][2]):
            await quizPoll(forTinder[statStar][2][quizStar][0], forTinder[statStar][2][quizStar][1], forTinder[statStar][2][quizStar][2], user_id)
            quizStar = quizStar + 1
        else:
            await bot.send_message(user_id, '–¢—ã –≤—Å—ë –≤—ã–ø–æ–ª–Ω–∏–ª!\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=what, parse_mode='markdown')
            quizStar = 0
    else:
        await bot.send_message(user_id, f"""–í–µ—Ä–Ω–æ!""")
        if quizStar < len(forTinder[statStar][2]):
            await quizPoll(forTinder[statStar][2][quizStar][0], forTinder[statStar][2][quizStar][1], forTinder[statStar][2][quizStar][2], user_id)
            quizStar = quizStar + 1
        else:
            await bot.send_message(user_id, '–¢—ã –≤—Å—ë –≤—ã–ø–æ–ª–Ω–∏–ª!\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=what, parse_mode='markdown')
            quizStar = 0

@dp.callback_query_handler(lambda c: c.data == 'helloo')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ß–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è ***—Å–µ–≥–æ–¥–Ω—è***?', reply_markup=what, parse_mode='markdown')

@dp.callback_query_handler(lambda c: c.data == 'IS')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, forTinder[statStar][0], reply_markup=tinder, parse_mode='markdown')

@dp.callback_query_handler(lambda c: c.data == 'ph')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–¢—É—Ç —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç :)', reply_markup=back, parse_mode='markdown')

@dp.callback_query_handler(lambda c: c.data == 'like')
async def process_callback_button(callback_query: types.CallbackQuery):
    global statStar
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, forTinder[statStar][1], reply_markup=backS, parse_mode='markdown')

@dp.callback_query_handler(lambda c: c.data == 'quiz')
async def process_callback_button(callback_query: types.CallbackQuery):
    global statStar
    global quizStar
    await bot.answer_callback_query(callback_query.id)
    await quiz(forTinder[statStar][2][quizStar][0], forTinder[statStar][2][quizStar][1], forTinder[statStar][2][quizStar][2], callback_query)
    quizStar = quizStar + 1

@dp.callback_query_handler(lambda c: c.data == 'dislike')
async def process_callback_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    global statStar
    if statStar < len(forTinder) - 1: 
        statStar = statStar + 1
        await bot.send_message(callback_query.from_user.id, forTinder[statStar][0], reply_markup=tinder, parse_mode='markdown')
    else:
        statStar = 0
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.", reply_markup=back, parse_mode='markdown')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)